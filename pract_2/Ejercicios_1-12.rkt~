;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-reader.ss" "lang")((modname Ejercicios_1-12) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
(require racket/string)

;###############################################################################
; Ejercicio 1:
; Representamos un punto mediante sus coordenadas numericas

; distancia-origen: Number Number -> Number
; recibe las coordenadas de un punto, devuelve la distancia al origen del mismo

(check-expect (distancia-origen 3 4) 5)

(define (distancia-origen x y)
  (sqrt (+ (sqr x) (sqr y))))

;###############################################################################
; Ejercicio 2:
; Representamos dos puntos mediante sus coordenadas numericas

; distancia-puntos: Number Number Number Number -> Number
; recibe las coordenadas de dos puntos, devuelve la distancia entro los mismos

(check-expect (distancia-puntos 3 4 0 0) 5)

(define (distancia-puntos x1 y1 x2 y2)
  (sqrt (+ (sqr (- x2 x1))(sqr (- y2 y1)))))

;###############################################################################
; Ejercicio 3:
; Representamos la longitud con numeros

; vol-cubo: Number -> Number
; recibe la longitud de la arista de un cubo, devuelve su volumen

(check-expect (vol-cubo 1) 1)

(define (vol-cubo arista)
  (expt arista 3))

;###############################################################################
; Ejercicio 4:
; Representamos la longitud con numeros

; area-cubo: Number -> Number
; recibe la longitud de la arista de un cubo y devuelve su área

(check-expect (area-cubo 2) 24)

(define (area-cubo arista)
  (* 6 (sqr arista)))

;###############################################################################
(define MSJ-ERROR-INDICE-NO-VALIDO "Error, indice no valido")
(define MSJ-ERROR-CADENA-VACIA "Error, la cadena ingresada es vacia")
(define MSJ-ERROR-NO-ES-STRING "Error, ingrese una cadena")

; Ejercicio 5:
; Diseño de datos

; string-insert: String Number -> String
; recibe un string y un número i e inserta "-" en la posición i-ésima del string

(check-expect (string-insert "Hello World" 3) "Hel-lo World")
(check-expect (string-insert "" 2 ) MSJ-ERROR-CADENA-VACIA)
(check-expect (string-insert "Argentina" -3) MSJ-ERROR-INDICE-NO-VALIDO)
(check-expect (string-insert "Chile" 13) MSJ-ERROR-INDICE-NO-VALIDO)
(check-expect (string-insert 42 3) MSJ-ERROR-NO-ES-STRING)

(define (string-insert str i)
  (if (string? str)
      (cond [(and (non-empty-string? str) (indice-valido str i))
             (string-append (inicioS str i) "-" (finS str i))]
            [(non-empty-string? str) MSJ-ERROR-INDICE-NO-VALIDO]
            [else MSJ-ERROR-CADENA-VACIA])
      MSJ-ERROR-NO-ES-STRING))

; Funciones auxiliares:

; indice-valido: String Number -> Boolean
; recibe un string y un número i y devuelve si existe la posición i-ésima del string
  
(check-expect (indice-valido "Gato" 3) #t)
(check-expect (indice-valido "Caballo" -1) #f)
(check-expect (indice-valido "Auto" 5) #f)
  
(define (indice-valido str i)
  (and (>= i 0) (<= i (string-length str))))

; inicioS: String Number -> String
; recibe un string y un número i y devuelve la subcadena formada por los caracteres
; desde la posición inicial hasta la posición i-ésima

(check-expect (inicioS "Hello" 2) "He")

(define (inicioS str i)
        (substring str 0 i))

; finS: String Number -> String
; recibe un string y un número i y devuelve la subcadena formada
; por los caracteres desde la posición i-ésima hasta la posición final

(check-expect (finS "Hello" 2) "llo")

(define (finS str i)
        (substring str i (string-length str)))

;###############################################################################
; Ejercicio 6:
; Diseño de datos

; string-last: String -> String
; recibe una cadena de caracteres, devuelve el ultimo caracter de la misma

(check-expect (string-last "Perro") "o")
(check-expect (string-last "") MSJ-ERROR-CADENA-VACIA)
(check-expect (string-last 42) MSJ-ERROR-NO-ES-STRING)

(define (string-last str)
  (if (string? str)
      (if (non-empty-string? str)
          (substring str (- (string-length str) 1))
           MSJ-ERROR-CADENA-VACIA)
      MSJ-ERROR-NO-ES-STRING))

;###############################################################################
; Ejercicio 7:
; Diseño de datos

; string-remove-last: String -> String
; recibe una cadena de caracteres, devuelve la misma cadena sin el ultimo caracter
; en el caso de que la cadena sea vacia se informara de esto

(check-expect (string-remove-last "Elefante") "Elefant")
(check-expect (string-remove-last "") MSJ-ERROR-CADENA-VACIA)
(check-expect (string-remove-last 42) MSJ-ERROR-NO-ES-STRING)

(define (string-remove-last str)
  (if (string? str)
      (if (non-empty-string? str)
          (substring str 0 (- (string-length str) 1))
           MSJ-ERROR-CADENA-VACIA)
      MSJ-ERROR-NO-ES-STRING))

;###############################################################################
; Ejercicio 9:

(define DESCUENTO-DOS-AMIGOS 0.10)
(define DESCUENTO-TRES-O-MAS-AMIGOS 0.20)
(define DESCUENTO-DOS-MESES 0.15)
(define DESCUENTO-TRES-O-MAS-MESES 0.25)
(define DESCUENTO-MAXIMO 0.35)
(define PRECIO-ORIGINAL-CUOTA-MENSUAL 650)

(define MSJ-ERROR-NO-ES-NUMERO "Error, ingrese un numero")
(define MSJ-ERROR-NO-ES-ENTERO "Error, ingrese un numero entero")

; Diseño de datos

; monto-persona: Number Number -> Number
; recibe la cantidad de personas que se están anotando y la cantidad de meses que
; abonan (para que se aplique la promoción deben pagar la misma cantidad de meses)
; y devuelve el monto que el Instituto debe cobrarle a cada uno.

(check-expect (monto-persona 2 2) 975)
(check-expect (monto-persona 3 3) 1267.5)
(check-expect (monto-persona 1 5) 2437.5)

(define (monto-persona cant-personas cant-meses)
  (* PRECIO-ORIGINAL-CUOTA-MENSUAL
     (- 1 (min (DESCUENTO-MAXIMO
               (+ (descuento-cant-personas cant-personas)
                  (descuento-cant-meses cant-meses)))))))

; descuento-cant-amigos: Number -> Number
; recibe la cantidad de personas que se están anotando
; y devuelve el descuento correspondiente

(check-expect (descuento-cant-personas 1) 0)
(check-expect (descuento-cant-personas 2) DESCUENTO-DOS-AMIGOS)
(check-expect (descuento-cant-personas 3) DESCUENTO-TRES-O-MAS-AMIGOS)
(check-expect (descuento-cant-personas -1) MSJ-ERROR-NO-ES-ENTERO)
(check-expect (descuento-cant-personas "") MSJ-ERROR-NO-ES-NUMERO)

(define (descuento-cant-amigos cant-personas)
  (if (integer? cant-personas)
      (cond [(= cant-personas 1) 0]
            [(= cant-personas 2) DESCUENTO-DOS-AMIGOS]
            [(>= cant-personas 3) DESCUENTO-TRES-O-MAS-AMIGOS]
            [else MSJ-ERROR-NO-ES-ENTERO])
      MSJ-ERROR-NO-ES-NUMERO))

; descuento-cant-meses: Number -> Number
; recibe la cantidad de meses que se están abonando
; y devuelve el descuento correspondiente

(check-expect (descuento-cant-meses 1) 0)
(check-expect (descuento-cant-meses 2) DESCUENTO-DOS-MESES)
(check-expect (descuento-cant-meses 3) DESCUENTO-TRES-O-MAS-MESES)
(check-expect (descuento-cant-meses -1) MSJ-ERROR-NO-ES-ENTERO)
(check-expect (descuento-cant-meses "") MSJ-ERROR-NO-ES-NUMERO)

(define (descuento-cant-meses cant-meses)
  (if (integer? cant-meses)
      (cond [(= cant-meses 1) 0]
            [(= cant-meses 2) DESCUENTO-DOS-MESES]
            [(>= cant-meses 3) DESCUENTO-TRES-O-MAS-MESES]
            [else MSJ-ERROR-NO-ES-ENTERO])
      MSJ-ERROR-NO-ES-NUMERO))

;###############################################################################
; Ejercicio 10:

;###############################################################################
; Ejercicio 11:

;###############################################################################
; Ejercicio 12: